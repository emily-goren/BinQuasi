?windowCounts
?csaw::windowCounts
dir = '/Users/emilygoren/Documents/School/ISU/RA/ChIP-seq/Analysis/dm6/Data/'
ChIP.files = c('chip1.sorted.bam', 'chip2.sorted.bam')
control.files = c('inp.sorted.bam', 'inp.sorted.bam')
xcorr <- function(gdata) { #
    chr <- gdata@seqnames@values#
    B <- gdata@seqinfo@seqlengths[gdata@seqinfo@seqnames == chr]#
    mus <- table(strand(gdata)) / B#
    mu.f <-mus[1]#
    mu.g <- mus[2]#
    V.f <- mu.f * (1 - mu.f)#
    V.g <- mu.g * (1 - mu.g)#
    pos.strand <- gdata[strand(gdata) == '+']#
    neg.strand <- gdata[strand(gdata) == '-']#
    f <- start(pos.strand)#
    g <- end(neg.strand)#
    ds <- seq(50, 600, by = 5)#
    rd <- lapply(ds, function(d) {#
                     f.d <- f[f <= (B-d)]#
                     g.d <- g[g >= (1+d)]#
                     g.d <- g.d - d#
                     fgsum <- length(intersect(f.d, g.d))#
                     num <- fgsum / (B-d) - mu.f * mu.g#
                     den <- sqrt(V.f * V.g)#
                     return(num / den)#
                 })#
    d <- ds[which.max(unlist(rd))]#
    return(d)#
}#
fragment.length <- function(dir, ChIP.files, control.files) {#
    bamFiles <- paste0(dir, c(ChIP.files, control.files))#
    n <- length(bamFiles)#
    bfList <- BamFileList(bamFiles)#
    samHeader <- lapply(bfList, function(x) scanBamHeader(path(x)))#
    chromosomes <- lapply(samHeader, function(x) x[[1]]$targets)#
    if (length(unique(chromosomes)) != 1)#
        warning("The supplied bam files were not all aligned to the same chromosome set. Using chromosomes from the first bam file to estimate fragment length.")#
    chromosomes <- chromosomes[[1]]#
    chr.ranges <- GRanges(seqnames = names(chromosomes), ranges = IRanges(1, chromosomes))#
    param <- lapply(chr.ranges, function(x) ScanBamParam(which=x))#
    fragLen <- lapply(1:n, function(i) { #
                           out <- lapply(param, function(x) { #
                                         rds <- readGAlignments(path(bfList[[i]]), param = x) #
                                         rds <- unique(GRanges(rds)) #
                                         est <- xcorr(rds)#
                                         return(est)#
                                     })#
                           ests <- unlist(out)#
                           frag <- mean(ests)#
                           return(frag)#
                       })#
#
    fl <- round(unlist(fragLen), 0)#
#
    return(fl)#
}#
cost.func <- function(gdata, d) {#
    chr <- gdata@seqnames@values#
    B <- gdata@seqinfo@seqlengths[gdata@seqinfo@seqnames == chr]#
    start <- seq(1, B, by = d) #
    end <- start + d - 1 #
    bins <- IRanges(start = start, end = end)#
    k <- countOverlaps(GRanges(seqnames = chr, ranges = bins), gdata) #
    kbar <- mean(k)#
    N <- sum(k)#
    v <- var(k) * (N-1) / N#
    cost <- ( 2*kbar - v) / (N*d)^2#
    return(cost)#
}#
#
bin.width <- function(dir, ChIP.files, frag.length) {#
    bamFiles <- paste0(dir, ChIP.files)#
    n <- length(bamFiles)#
    bfList <- BamFileList(bamFiles)#
    samHeader <- lapply(bfList, function(x) scanBamHeader(path(x)))#
    chrs <- lapply(samHeader, function(x) {#
                              t <- x[[1]]$targets#
                              return(t[which.max(t)])#
                          })#
    chr.ranges <- lapply(chrs, function(x)  GRanges(seqnames = names(x), ranges = IRanges(1, x)))#
    param <- lapply(chr.ranges, function(x) ScanBamParam(which=x))#
    rds <- lapply(1:n, function(i) { #
                      rds.ga <- readGAlignments(path(bfList[[i]]), param = param[[i]]) #
                      rds.gr <- unique(GRanges(rds.ga)) #
                      rds.out <- resize(rds.gr, frag.length[i]) #
                      return(rds.out)#
                  })#
    candidate.bins <- seq(50, 1000, by = 5)#
    est <- lapply(rds, function(x) {#
                      w <- lapply(candidate.bins, function(d) cost.func(x, d))#
                      best <- candidate.bins[which.min(unlist(w))]#
                      return(best) })#
    est <- min(unlist(est))#
    return(est)#
}
bin.size = NULL
frag.length = NULL
minimum.count = 0
N <- length(c(ChIP.files, control.files))#
    if (is.null(frag.length)) {#
        message('Fragment length not provided. Estimating fragment length using cross correlation.')#
        frag.length <- fragment.length(dir, ChIP.files, control.files)#
    }#
    if (length(frag.length) == 1) {#
        frag.length <- rep(frag.length, N)#
    }#
    if (length(frag.length) != N) {#
        message('Fragment length vector differs in length from number of samples. Estimating fragment length using cross correlation.')#
        frag.length <- fragment.length(dir, ChIP.files, control.files)#
     }#
    if (any(round(frag.length, 0) != frag.length)) {#
        message('Fragment length(s) are not integer valued. Rounding to nearest integer.')#
        frag.length <- round(frag.length, 0)#
     }#
     if (any(frag.length < 0)) {#
         message('Negative fragment length(s) provided. Estimating fragment length using cross correlation.')#
        frag.length <- fragment.length(dir, ChIP.files, control.files)#
     }#
    if (is.null(bin.size)) {#
        message('Bin size not provided. Estimating bin size.')#
        bin.size <- bin.width(dir, ChIP.files, frag.length)#
    }#
    if (bin.size < 50) {#
         message('The bin size is too small (less than 50bp). Estimating bin size.')#
        bin.size <- bin.width(dir, ChIP.files, frag.length)#
    }#
    if (bin.size > 1000) {#
         message('The bin size is too large (greater than 1000bp). Estimating bin size.')#
        bin.size <- bin.width(dir, ChIP.files, frag.length)#
    }#
#
    if (bin.size != floor(bin.size))  {#
         message('The bin size specified is not integer valued. Rounding to nearest integer.')#
        bin.size <- round(bin.size, 0)#
    }#
    bam.files <- paste0(dir, c(ChIP.files, control.files))
require(GenomicAlignmnets)
require(GenomicAlignments)
N <- length(c(ChIP.files, control.files))#
    if (is.null(frag.length)) {#
        message('Fragment length not provided. Estimating fragment length using cross correlation.')#
        frag.length <- fragment.length(dir, ChIP.files, control.files)#
    }#
    if (length(frag.length) == 1) {#
        frag.length <- rep(frag.length, N)#
    }#
    if (length(frag.length) != N) {#
        message('Fragment length vector differs in length from number of samples. Estimating fragment length using cross correlation.')#
        frag.length <- fragment.length(dir, ChIP.files, control.files)#
     }#
    if (any(round(frag.length, 0) != frag.length)) {#
        message('Fragment length(s) are not integer valued. Rounding to nearest integer.')#
        frag.length <- round(frag.length, 0)#
     }#
     if (any(frag.length < 0)) {#
         message('Negative fragment length(s) provided. Estimating fragment length using cross correlation.')#
        frag.length <- fragment.length(dir, ChIP.files, control.files)#
     }#
    if (is.null(bin.size)) {#
        message('Bin size not provided. Estimating bin size.')#
        bin.size <- bin.width(dir, ChIP.files, frag.length)#
    }#
    if (bin.size < 50) {#
         message('The bin size is too small (less than 50bp). Estimating bin size.')#
        bin.size <- bin.width(dir, ChIP.files, frag.length)#
    }#
    if (bin.size > 1000) {#
         message('The bin size is too large (greater than 1000bp). Estimating bin size.')#
        bin.size <- bin.width(dir, ChIP.files, frag.length)#
    }#
#
    if (bin.size != floor(bin.size))  {#
         message('The bin size specified is not integer valued. Rounding to nearest integer.')#
        bin.size <- round(bin.size, 0)#
    }#
    bam.files <- paste0(dir, c(ChIP.files, control.files))
bin.size
frag.length
control.files = c('inp1.sorted.bam', 'inp2.sorted.bam')
N <- length(c(ChIP.files, control.files))#
    if (is.null(frag.length)) {#
        message('Fragment length not provided. Estimating fragment length using cross correlation.')#
        frag.length <- fragment.length(dir, ChIP.files, control.files)#
    }#
    if (length(frag.length) == 1) {#
        frag.length <- rep(frag.length, N)#
    }#
    if (length(frag.length) != N) {#
        message('Fragment length vector differs in length from number of samples. Estimating fragment length using cross correlation.')#
        frag.length <- fragment.length(dir, ChIP.files, control.files)#
     }#
    if (any(round(frag.length, 0) != frag.length)) {#
        message('Fragment length(s) are not integer valued. Rounding to nearest integer.')#
        frag.length <- round(frag.length, 0)#
     }#
     if (any(frag.length < 0)) {#
         message('Negative fragment length(s) provided. Estimating fragment length using cross correlation.')#
        frag.length <- fragment.length(dir, ChIP.files, control.files)#
     }
frag.length
bam.files <- paste0(dir, c(ChIP.files, control.files))#
    cts.all <- windowCounts(bam.files, spacing = bin.size,#
                            ext = frag.length, shift = 0,#
                            filter = minimum.count, bin = FALSE)
require(csaw)
bam.files <- paste0(dir, c(ChIP.files, control.files))#
    cts.all <- windowCounts(bam.files, spacing = bin.size,#
                            ext = frag.length, shift = 0,#
                            filter = minimum.count, bin = FALSE)
bin.size
if (is.null(bin.size)) {#
        message('Bin size not provided. Estimating bin size.')#
        bin.size <- bin.width(dir, ChIP.files, frag.length)#
    }#
    if (bin.size < 50) {#
         message('The bin size is too small (less than 50bp). Estimating bin size.')#
        bin.size <- bin.width(dir, ChIP.files, frag.length)#
    }#
    if (bin.size > 1000) {#
         message('The bin size is too large (greater than 1000bp). Estimating bin size.')#
        bin.size <- bin.width(dir, ChIP.files, frag.length)#
    }#
#
    if (bin.size != floor(bin.size))  {#
         message('The bin size specified is not integer valued. Rounding to nearest integer.')#
        bin.size <- round(bin.size, 0)#
    }
bam.files <- paste0(dir, c(ChIP.files, control.files))#
    cts.all <- windowCounts(bam.files, spacing = bin.size,#
                            ext = frag.length, shift = 0,#
                            filter = minimum.count, bin = FALSE)#
    cts <- assay(cts.all)
head(cts)
head(cts[rowSums(cts) != 0, ])
bin.size
frag.length
cts.all <- windowCounts(bam.files, spacing = bin.size,#
                            ext = 0, shift = 0,#
                            filter = minimum.count, bin = FALSE)#
    cts <- assay(cts.all)
cts.all <- windowCounts(bam.files, spacing = bin.size,#
                            ext = NA, shift = 0,#
                            filter = minimum.count, bin = FALSE)#
    cts <- assay(cts.all)
head(cts[rowSums(cts) != 0, ])
str(cts)
str(cts.all)
bam.files <- paste0(dir, c(ChIP.files, control.files))#
    cts.all <- windowCounts(bam.files, spacing = bin.size,#
                            ext = frag.length/2, shift = 0,#
                            filter = minimum.count, bin = FALSE)#
    cts <- assay(cts.all)#
    colnames(cts) <- c(ChIP.files, control.files)
head(cts[rowSums(cts) != 0, ])
dir
ChIP.files
control.files
frag.length
bin.size
minimum.count
minimum.count = 50
bam.files <- paste0(dir, c(ChIP.files, control.files))#
    cts.all <- windowCounts(bam.files, spacing = bin.size,#
                            ext = frag.length/2, shift = 0,#
                            filter = minimum.count, bin = FALSE)#
    cts <- assay(cts.all)#
    colnames(cts) <- c(ChIP.files, control.files)#
#
    start <- rowRanges(cts.all)@ranges@start#
    end <- start + rowRanges(cts.all)@ranges@width -1#
    chr <- as.character(seqnames(rowRanges(cts.all)))#
    cts.out <- data.frame(chr, start, end, cts)
cts.out
head(cts)
cts.all <- windowCounts(bam.files, spacing = bin.size,#
                            ext = 36, shift = 0,#
                            filter = minimum.count, bin = FALSE)#
    cts <- assay(cts.all)
head(cts)
head(cts.out)
colnames(cts) <- c(ChIP.files, control.files)#
#
    start <- rowRanges(cts.all)@ranges@start#
    end <- start + rowRanges(cts.all)@ranges@width -1#
    chr <- as.character(seqnames(rowRanges(cts.all)))#
    cts.out <- data.frame(chr, start, end, cts)
head(cts.out)
bam.files <- paste0(dir, c(ChIP.files, control.files))#
    cts.all <- windowCounts(bam.files, spacing = bin.size,#
                            ext = frag.length/2, shift = 0,#
                            filter = minimum.count, bin = FALSE)#
    cts <- assay(cts.all)#
    colnames(cts) <- c(ChIP.files, control.files)#
#
    start <- rowRanges(cts.all)@ranges@start#
    end <- start + rowRanges(cts.all)@ranges@width -1#
    chr <- as.character(seqnames(rowRanges(cts.all)))#
    cts.out <- data.frame(chr, start, end, cts)
head(cts.out)
bam.files <- paste0(dir, c(ChIP.files, control.files))#
    cts.all <- windowCounts(bam.files, spacing = bin.size,#
                            ext = frag.length/2, shift = 0,#
                            filter = minimum.count, bin = TRUE)#
    cts <- assay(cts.all)#
    colnames(cts) <- c(ChIP.files, control.files)#
#
    start <- rowRanges(cts.all)@ranges@start#
    end <- start + rowRanges(cts.all)@ranges@width -1#
    chr <- as.character(seqnames(rowRanges(cts.all)))#
    cts.out <- data.frame(chr, start, end, cts)
head(cts.out)
minimum.count
